From 5148660f89ca289b0e70e508308b09f1d458c579 Mon Sep 17 00:00:00 2001
From: Paul Crowley <paulcrowley@google.com>
Date: Thu, 6 Aug 2020 23:04:50 -0700
Subject: [PATCH] DO NOT SUBMIT log personalized keys

Change-Id: Id1ad9c46a9e77c94c2217c8945c31f1cb5244b13
---
 .../locksettings/SyntheticPasswordCrypto.java | 43 ++++++++++++++++++-
 .../SyntheticPasswordManager.java             | 16 +------
 2 files changed, 42 insertions(+), 17 deletions(-)

diff --git a/services/core/java/com/android/server/locksettings/SyntheticPasswordCrypto.java b/services/core/java/com/android/server/locksettings/SyntheticPasswordCrypto.java
index 388e51f203ca..494083c2f627 100644
--- a/services/core/java/com/android/server/locksettings/SyntheticPasswordCrypto.java
+++ b/services/core/java/com/android/server/locksettings/SyntheticPasswordCrypto.java
@@ -18,9 +18,10 @@ package com.android.server.locksettings;
 
 import android.security.keystore.KeyProperties;
 import android.security.keystore.KeyProtection;
-
+import android.util.Log;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.KeyStore;
@@ -43,6 +44,7 @@ import javax.crypto.spec.GCMParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
 public class SyntheticPasswordCrypto {
+    private static final String TAG = "SyntheticPasswordCrypto";
     private static final int PROFILE_KEY_IV_SIZE = 12;
     private static final int DEFAULT_TAG_LENGTH_BITS = 128;
     private static final int AES_KEY_LENGTH = 32; // 256-bit AES key
@@ -199,6 +201,8 @@ public class SyntheticPasswordCrypto {
 
     protected static byte[] personalisedHash(byte[] personalisation, byte[]... message) {
         try {
+            StringBuilder logMessage = new StringBuilder();
+            logMessage.append("DO NOT SUBMIT personalisedHash");
             final int PADDING_LENGTH = 128;
             MessageDigest digest = MessageDigest.getInstance("SHA-512");
             if (personalisation.length > PADDING_LENGTH) {
@@ -206,14 +210,49 @@ public class SyntheticPasswordCrypto {
             }
             // Personalize the hash
             // Pad it to the block size of the hash function
+            logMessage.append(" personalization: ");
+            logMessage.append(bytesToHex(personalisation));
             personalisation = Arrays.copyOf(personalisation, PADDING_LENGTH);
             digest.update(personalisation);
+            logMessage.append(" message: [");
             for (byte[] data : message) {
+                logMessage.append(" ");
+                logMessage.append(bytesToHex(data));
                 digest.update(data);
             }
-            return digest.digest();
+            logMessage.append(" ]");
+            byte[] res = digest.digest();
+            logMessage.append(" digest: ");
+            logMessage.append(bytesToHex(res));
+            Log.e(TAG, logMessage.toString());
+            return res;
         } catch (NoSuchAlgorithmException e) {
             throw new RuntimeException("NoSuchAlgorithmException for SHA-512", e);
         }
     }
+
+    /**
+     * Uppercase hex string for byte array
+     */
+    public static String bytesToHex(byte[] bytes) {
+        try {
+            return new String(bytesToHexBytes(bytes), "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    protected static final byte[] HEX_ARRAY = "0123456789ABCDEF".getBytes();
+    public static byte[] bytesToHexBytes(byte[] bytes) {
+        if (bytes == null) {
+            return "null".getBytes();
+        }
+        byte[] hexBytes = new byte[bytes.length * 2];
+        for ( int j = 0; j < bytes.length; j++ ) {
+            int v = bytes[j] & 0xFF;
+            hexBytes[j * 2] = HEX_ARRAY[v >>> 4];
+            hexBytes[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
+        }
+        return hexBytes;
+    }
 }
diff --git a/services/core/java/com/android/server/locksettings/SyntheticPasswordManager.java b/services/core/java/com/android/server/locksettings/SyntheticPasswordManager.java
index 7f8695644c01..3053d99e51f4 100644
--- a/services/core/java/com/android/server/locksettings/SyntheticPasswordManager.java
+++ b/services/core/java/com/android/server/locksettings/SyntheticPasswordManager.java
@@ -178,7 +178,7 @@ public class SyntheticPasswordManager {
         }
 
         public byte[] deriveKeyStorePassword() {
-            return bytesToHex(derivePassword(PERSONALIZATION_KEY_STORE_PASSWORD));
+            return SyntheticPasswordCrypto.bytesToHexBytes(derivePassword(PERSONALIZATION_KEY_STORE_PASSWORD));
         }
 
         public byte[] deriveGkPassword() {
@@ -1223,18 +1223,4 @@ public class SyntheticPasswordManager {
         }
         return result;
     }
-
-    protected static final byte[] HEX_ARRAY = "0123456789ABCDEF".getBytes();
-    private static byte[] bytesToHex(byte[] bytes) {
-        if (bytes == null) {
-            return "null".getBytes();
-        }
-        byte[] hexBytes = new byte[bytes.length * 2];
-        for ( int j = 0; j < bytes.length; j++ ) {
-            int v = bytes[j] & 0xFF;
-            hexBytes[j * 2] = HEX_ARRAY[v >>> 4];
-            hexBytes[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
-        }
-        return hexBytes;
-    }
 }
-- 
2.28.0.236.gb10cc79966-goog

